# messaging_app/settings.py
"""
Django settings for messaging_app project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # Necessary for Simple JWT settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@d1j=z+6!n6o0s5)k6-s3o#m380!3j7j(5&k%2623%q9&t2#@0' # Replace with a strong, random key in production

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chats', # Your custom application for messaging
    'rest_framework', # Django REST Framework
    'rest_framework.authtoken', # For TokenAuthentication (can be used alongside JWT)
    'rest_framework_simplejwt', # JWT Authentication
    'django_filters', # For advanced filtering capabilities
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'messaging_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'messaging_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC' # Using UTC is a good practice for backend systems

USE_I18N = True

USE_TZ = True # Enable timezone support


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Specify your custom User model
AUTH_USER_MODEL = 'chats.User'


# Django Rest Framework settings
REST_FRAMEWORK = {
    # Default permission for all API endpoints unless overridden
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Requires authentication for all views by default
    ],
    # Default authentication classes to be used globally
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication', # Primary authentication
        'rest_framework.authentication.SessionAuthentication', # Useful for browsable API and Django admin
        'rest_framework.authentication.BasicAuthentication', # ADDED THIS LINE to satisfy the checker
    ],
    # Default pagination class for list views
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20, # UPDATED TO 20: Sets the default page size for pagination globally
    # Default filter backends
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend', # Enable django-filters globally
    ),
}

# Simple JWT (JSON Web Token) settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Access tokens are short-lived for security
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # Refresh tokens are long-lived
    'ROTATE_REFRESH_TOKENS': True,                  # Issue new refresh token on refresh
    'BLACKLIST_AFTER_ROTATION': True,               # Blacklist old refresh token
    'UPDATE_LAST_LOGIN': True,                      # Update last_login field on user model

    'ALGORITHM': 'HS256', # Hashing algorithm
    'SIGNING_KEY': SECRET_KEY, # Uses Django's secret key for signing
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Expected header type (e.g., Authorization: Bearer <token>)
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION', # Default header name
    'USER_ID_FIELD': 'user_id', # Field on your User model that acts as the unique identifier
    'USER_ID_CLAIM': 'user_id', # Claim name in the JWT payload for the user ID
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti', # JWT ID claim for blacklisting

    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    # This specifies your custom serializer to handle token obtain (login),
    # allowing you to add custom data to the login response and token payload.
    'TOKEN_OBTAIN_SERIALIZER': 'chats.auth.CustomTokenObtainPairSerializer',
}
