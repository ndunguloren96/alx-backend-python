# Filename: messaging_app/.github/workflows/ci.yml

name: Django CI & Quality Checks

# Trigger the workflow on every push and pull request to the 'main' branch
on:
  push:
    branches: [ "main" ]
    paths:
      - 'messaging_app/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'messaging_app/**'

# A workflow run is made up of one or more jobs
jobs:
  build:
    runs-on: ubuntu-latest
    
    # Define a MySQL service for the tests
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: messaging_app_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        working-directory: ./messaging_app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov

      - name: Configure MySQL for Django
        working-directory: ./messaging_app
        run: |
          # The MySQL host is a service, so we use 'localhost'
          # We export the database URL to an environment variable that Django can read
          echo "DATABASE_URL=mysql://root:@localhost:3306/messaging_app_test" >> $GITHUB_ENV
      
      - name: Run Django Tests
        working-directory: ./messaging_app
        run: pytest
      
      - name: Run Flake8 Code Quality Check
        working-directory: ./messaging_app
        run: flake8 .
        # The exit code from flake8 will automatically fail the job if errors are found
        # This satisfies the requirement to fail the build on linting errors.

      - name: Generate Coverage Report
        working-directory: ./messaging_app
        run: pytest --cov=. --cov-report=xml
        
      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: messaging_app/coverage.xml
          if-no-files-found: ignore
